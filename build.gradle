//apply plugin: 'java-library-distribution'
apply plugin: 'application'
mainClassName = 'ExperimentMain'

sourceCompatibility = '1.8'
version = '0.0.2'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'ExperimentMain'
}

repositories {
    flatDir {
        dirs '../cst/build/libs'
    }
    mavenCentral()
    maven { url 'https://jitpack.io' }
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    //implementation fileTree(dir: 'lib', include: ['*.jar'])
    implementation 'com.github.CST-Group:cst:0.6.1'
    implementation 'com.github.CST-Group:WS3DProxy:0.0.1'
    //implementation 'sqlite-jdbc:3.7.2'
    //implementation ':cst:0.6.2-full'   // To be used while developing CST code
    implementation 'org.json:json:20180813'
    
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    //implementation 'com.github.CST-Group:cst:0.2.4'
    //implementation 'org.json:json:20180813'
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

task uberJar(type: Jar) {
    archiveClassifier = 'full'
    manifest {
      attributes(
        'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
        'Main-Class': mainClassName
      )
    }
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
artifacts
{
    archives uberJar
}
